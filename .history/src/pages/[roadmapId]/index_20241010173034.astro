---
// <!-- 基于Astro框架的Web页面组件，它用于生成一个技术路线图（Roadmap）的静态页面 -->
import { EditorRoadmap } from "../../components/EditorRoadmap/EditorRoadmap.tsx"; // 显示和编辑路线图组件
import FAQs, { type FAQType } from "../../components/FAQs/FAQs.astro"; // 常见问题解答
import FrameRenderer from "../../components/FrameRenderer/FrameRenderer.astro"; // 渲染路线图的SVG图像的渲染器
// import RelatedRoadmaps from '../../components/RelatedRoadmaps.astro';    // 相关路线图
import RoadmapHeader from "../../components/RoadmapHeader.astro"; // 路线图界面头部
// import ShareIcons from '../../components/ShareIcons/ShareIcons.astro';      //分享按钮
// import { TopicDetail } from "../../components/TopicDetail/TopicDetail.tsx";
// import UpcomingForm from "../../components/UpcomingForm.astro";     // 等待更新
import { UserProgressModal } from "../../components/UserProgress/UserProgressModal.tsx";
import BaseLayout from "../../layouts/BaseLayout.astro"; // 布局
import {
  generateArticleSchema,
  generateFAQSchema,
} from "../../lib/jsonld-schema.ts";
// 社交共享
import { getOpenGraphImageUrl } from "../../lib/open-graph.ts";
import { type RoadmapFrontmatter, getRoadmapIds } from "../../lib/roadmap.ts";

// 获取所有路线图的ID列表，然后使用这些ID来生成静态路径，供Astro用于静态生成页面
export async function getStaticPaths() {
  const roadmapIds = await getRoadmapIds();
  return roadmapIds.map((roadmapId) => ({
    params: { roadmapId },
  }));
}

interface Params extends Record<string, string | undefined> {
  roadmapId: string;
}

const { roadmapId } = Astro.params as Params;
// 使用roadmapId动态导入路线图的Markdown文件和相关的FAQ组件。
const roadmapFile = await import(
  `../../data/roadmaps/${roadmapId}/${roadmapId}.md`
);
const { faqs: roadmapFAQs = [] } = await import(
  `../../data/roadmaps/${roadmapId}/faqs.astro`
);
const roadmapData = roadmapFile.frontmatter as RoadmapFrontmatter;

let jsonLdSchema = [];

// 根据路线图的元数据，生成JSON-LD模式数据，这有助于搜索引擎优化
if (roadmapData.schema) {
  const roadmapSchema = roadmapData.schema;
  jsonLdSchema.push(
    generateArticleSchema({
      url: `https://localhost:4321/${roadmapId}`,
      headline: roadmapSchema.headline,
      description: roadmapSchema.description,
      datePublished: roadmapSchema.datePublished,
      dateModified: roadmapSchema.dateModified,
      imageUrl: roadmapSchema.imageUrl,
    })
  );
}

if (roadmapFAQs.length) {
  jsonLdSchema.push(generateFAQSchema(roadmapFAQs as unknown as FAQType[]));
}

// // 社交软件共享页面时用的缩略图
const ogImageUrl =
  roadmapData?.seo?.ogImageUrl ||
  getOpenGraphImageUrl({
    group: "roadmap",
    resourceId: roadmapId,
  });
---

<BaseLayout
  permalink={`/${roadmapId}`}
  title={roadmapData?.seo?.title}
  briefTitle={roadmapData.briefTitle}
  ogImageUrl={ogImageUrl}
  description={roadmapData.seo.description}
  keywords={roadmapData.seo.keywords}
  noIndex={roadmapData.isUpcoming}
  jsonLd={jsonLdSchema}
  resourceId={roadmapId}
  resourceType="roadmap"
>
  <!-- Preload the font being used in the renderer -->
  <link
    rel="preload"
    href="/fonts/balsamiq.woff2"
    as="font"
    type="font/woff2"
    crossorigin
    slot="after-header"
  />

  <!-- 路线图头部 -->
  <RoadmapHeader
    title={roadmapData.title}
    description={roadmapData.description}
    note={roadmapData.note}
    tnsBannerLink={roadmapData.tnsBannerLink}
    roadmapId={roadmapId}
    hasTopics={roadmapData.hasTopics}
    isUpcoming={roadmapData.isUpcoming}
    isForkable={roadmapData.isForkable}
    question={roadmapData.question}
  />

  <div class="bg-gray-50 pt-4 sm:pt-12">
    {
      !roadmapData.isUpcoming && (
        <div class="container relative !max-w-[1000px]">
          {/* <ShareIcons
            description={roadmapData.briefDescription}
            pageUrl={`https://roadmap.sh/${roadmapId}`}
          /> */}
          {/* <TopicDetail
            resourceTitle={roadmapData.title}
            resourceType="roadmap"
            client:idle
            canSubmitContribution={true}
          /> */}

          {roadmapData?.renderer === "editor" ? (
            <EditorRoadmap
              resourceId={roadmapId}
              resourceType="roadmap"
              dimensions={roadmapData.dimensions!}
              client:load
            />
          ) : (
            <FrameRenderer
              resourceType={"roadmap"}
              resourceId={roadmapId}
              dimensions={roadmapData.dimensions}
            />
          )}
        </div>
      )
    }

    <!-- {roadmapData.isUpcoming && <UpcomingForm />} -->
    <UserProgressModal
      resourceId={roadmapId}
      resourceType="roadmap"
      renderer={roadmapData?.renderer}
      client:only="react"
    />

    {
      roadmapId === "docker" && (
        <p class="mb-8 px-5 text-center text-xs text-gray-400 sm:mb-12">
          Roadmap owner Insight Partners is an investor in Docker. ？？？
        </p>
      )
    }

    <FAQs faqs={roadmapFAQs as unknown as FAQType[]} />

    <!-- <RelatedRoadmaps roadmap={roadmapData} /> -->
  </div>
</BaseLayout>
